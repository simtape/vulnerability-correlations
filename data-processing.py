import os, json

FOLDER_VULNERABILITIES = "data/vulnerabilities/"

"""
create two csv, one with the nodes and one with the edges.
The nodes will be the vulnerabilities,
the edges will be the packages
"""
def csv_vulnerabilities_processing():
    path_to_json = 'data/vulnerabilities/'
    json_files = [pos_json for pos_json in os.listdir(path_to_json) if pos_json.endswith('.json')]
    print(json_files)
    edges = {}

    for file in json_files:
        print("Now working on: " + file)
        f = open(FOLDER_VULNERABILITIES + file)
        data = json.load(f)

        for result in data["results"]:
            fixed_packages = result["fixed_packages"]
            vulnerability_id = result["vulnerability_id"]
            if len(fixed_packages) > 0:
                for package in fixed_packages:
                    package_purl = package["purl"]
                    if package["purl"] not in edges.keys():
                        edges.update({package_purl: []})

                    edges[package_purl].append(vulnerability_id)

    with open("node_edges_test1.json", "w") as outfile:
        json.dump(edges, outfile, indent=4)


"""
create two csv, one with the nodes and one with the edges.
The nodes will be the packages,
the edges will be the vulnerabilities
"""
def csv_packages_processing():
    BASE_PATH = "data/packages/"
    edges = {}
    print(os.listdir(BASE_PATH))

    for dir in os.listdir(BASE_PATH):
        if os.path.isdir(BASE_PATH + dir):
            print("Now working on dir: " + dir)
            path_to_json = 'data/packages/' + dir + '/affected/'
            json_files = [pos_json for pos_json in os.listdir(path_to_json) if pos_json.endswith('.json')]

            for file in json_files:
                print("Now working on: " + file)
            f = open(path_to_json + file)
            data = json.load(f)

            for result in data["results"]:
                purl = result["purl"]
                affected_by_vulerabilities = result["affected_by_vulnerabilities"]
                if len(affected_by_vulerabilities)> 0:
                    for affected in affected_by_vulerabilities:
                        vulnerability = affected["vulnerability_id"]

                        if vulnerability not in edges.keys():
                            edges.update({vulnerability: []})

                        edges[vulnerability].append(purl)

    with open("edges_vulnerabilities.json", "w") as outfile:
        json.dump(edges, outfile, indent=4)


csv_packages_processing()