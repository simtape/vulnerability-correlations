import os, json
import time

from gephistreamer import graph
from gephistreamer import streamer
import logging

FOLDER_VULNERABILITIES = "data/vulnerabilities/"

"""
Takes as input the response from the vulnerablecode endpoint
api/packages, with results related on a specific package.
For each package, all the json files found are parsed
and the function generates a json with packages grouped by vulnerabilities.
"""
def grouping_by_vulnerabilities()-> None:
    BASE_PATH = "data/packages/"

    print(os.listdir(BASE_PATH))

    for dir in os.listdir(BASE_PATH):
        vulnerabilities = {}
        if os.path.isdir(BASE_PATH + dir):
            path_to_json = 'data/packages/' + dir + '/affected/'
            json_files = [pos_json for pos_json in os.listdir(path_to_json) if pos_json.endswith('.json')]

            for file in json_files:
                print("Now working on: " + file)
                f = open(path_to_json + file)
                data = json.load(f)

                for result in data["results"]:
                    purl = result["purl"]
                    affected_by_vulerabilities = result["affected_by_vulnerabilities"]
                    if len(affected_by_vulerabilities) > 0:
                        for affected in affected_by_vulerabilities:
                            vulnerability = affected["vulnerability_id"]

                            if vulnerability not in vulnerabilities.keys():
                                vulnerabilities.update({vulnerability: []})

                            vulnerabilities[vulnerability].append(purl)

                vulnerabilities_no_dup = {}
                for i, edge in enumerate(vulnerabilities.items()):
                    set_nodes = set(edge[1])
                    vulnerabilities_no_dup[edge[0]] = list(set_nodes)

            with open("data/results/" + dir + "-vulnerabilities-affected.json", "w") as outfile:
                json.dump(vulnerabilities_no_dup, outfile, indent=4)


"""
Takes as input the response from the vulnerablecode endpoint
api/packages, with results related on a specific package.
For each package, all the json files found are parsed
and the function generates a json with packages grouped by packages.
"""
def grouping_by_packages()-> None:
    BASE_PATH = "data/packages/"

    print(os.listdir(BASE_PATH))

    for dir in os.listdir(BASE_PATH):
        packages = {}
        if os.path.isdir(BASE_PATH + dir):
            path_to_json = 'data/packages/' + dir + '/affected/'
            json_files = [pos_json for pos_json in os.listdir(path_to_json) if pos_json.endswith('.json')]

            for file in json_files:
                print("Now working on: " + file)
                f = open(path_to_json + file)
                data = json.load(f)

                for result in data["results"]:
                    purl = result["purl"]
                    if purl not in packages.keys():
                        packages[purl] = []
                    else:
                        print("Trovato package doppione")

                    vulnerabilities = result["affected_by_vulnerabilities"]
                    for vulnerability in vulnerabilities:
                        id = vulnerability["vulnerability_id"]
                        packages[purl].append(id)

                    packages_no_dup = {}
                    #removing duplicated vulnerability, if there are
                    for i, package in enumerate(packages.items()):
                        set_vulnerabilities = set(package[1])
                        packages_no_dup[package[0]] = list(set_vulnerabilities)

            with open("data/results/grouped_by_packages/" + dir + "-packages-affected.json", "w") as outfile:
                json.dump(packages_no_dup, outfile, indent=4)



"""
takes as in
"""
def stream_vulnerabilities_as_nodes(filepath: str) -> None:
    stream = streamer.Streamer(streamer.GephiWS(hostname="localhost", port=8080, workspace="workspace1"))
    nodes = {}
    edges = {}

    f = open(filepath)
    data = json.load(f)

    for vulnerability in data.items():
        print(vulnerability[0])
        packages = vulnerability[1]
        if vulnerability[0] not in nodes.keys():
            nodes[vulnerability[0]] = graph.Node(vulnerability[0])
            stream.add_node(graph.Node(vulnerability[0]))

        for package in packages:
            for compared_vulnerability in data.items():
                if compared_vulnerability[0] != vulnerability[0]:
                    compared_packages = compared_vulnerability[1]
                    for compared_package in compared_packages:
                        if compared_package == package and vulnerability[0] + compared_vulnerability[0] not in edges.keys() and compared_vulnerability[0] + vulnerability[0] not in edges.keys():
                            if compared_vulnerability[0] not in nodes:
                                nodes[compared_vulnerability[0]] = graph.Node(compared_vulnerability[0])
                                stream.add_node(graph.Node(compared_vulnerability[0]))

                            new_edge = graph.Edge(nodes[vulnerability[0]], nodes[compared_vulnerability[0]], directed=False)
                            stream.add_edge(new_edge)
                            edges[vulnerability[0] + compared_vulnerability[0]] = new_edge

    print("archi: " + str(len(edges)))
    print("nodi: " + str(len(nodes)))


def stream_packages_as_nodes(filepath: str) -> None:
    stream = streamer.Streamer(streamer.GephiWS(hostname="localhost", port=8080, workspace="workspace1"))
    nodes = {}
    edges = {}
    #logging.basicConfig(filename="group_by_packages.log", level=logging.DEBUG)

    f = open(filepath)
    data = json.load(f)

    for package in data.items():
        vulnerabilities = package[1]

        if package[0] not in nodes.keys():
            nodes[package[0]] = graph.Node(package[0])
            stream.add_node(graph.Node(package[0]))

        for vulnerability in vulnerabilities:
            for compared_package in data.items():
                if compared_package[0] != package[0]:
                    compared_vulnerabilities = compared_package[1]

                    for compared_vulnerability in compared_vulnerabilities:
                        if compared_vulnerability == vulnerability and package[0] + compared_package[0] not in edges.keys() and compared_package[0] + package[0] not in edges.keys():
                            if compared_package[0] not in nodes:
                                nodes[compared_package[0]] = graph.Node(compared_package[0])
                                stream.add_node(graph.Node(compared_package[0]))

                            new_edge = graph.Edge(nodes[package[0]], nodes[compared_package[0]],directed=False)
                            stream.add_edge(new_edge)
                            edges[package[0] + compared_package[0]] = new_edge




stream_vulnerabilities_as_nodes("data/results/grouped_by_vulnerabilities/rpm-vulnerabilities-affected.json")