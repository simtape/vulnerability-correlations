import json
import requests
from dotenv import load_dotenv
import logging
import os
import time

from requests import Response

load_dotenv()

FOLDER_PACKAGES = "data/packages/"
FOLDER_VULNERABILITIES = "data/vulnerabilities"
BASE_URL = "https://public.vulnerablecode.io/api/"

headers = {'Content-type': 'application/json',
           'Authorization': os.getenv("API_KEY"),
           "Connection": 'keep-alive',
           'Accept-encoding': "gzip, deflate, br",
           "Accept": "*/*"
           }

"""
extracts, from a json containing all packages in the db of vulnerablecode.io, 
only the base names of the pkgs(ex. pkg:alpine).
saves on json the list of the names.
"""


def extract_packages_names() -> None:
    try:
        f = open(FOLDER_PACKAGES + 'all-packages.json')
    except FileNotFoundError:
        print("File not existing")

    packages = json.load(f)
    pkg_names = []

    for package in packages:
        pkg_name = ""
        print(package)
        idx = 0
        while package[idx] != "/":
            pkg_name = pkg_name + package[idx]
            idx += 1

        if pkg_name not in pkg_names:
            pkg_names.append(pkg_name)

    with open(FOLDER_PACKAGES + "packages-names.json", "w") as outfile:
        json.dump(pkg_names, outfile)


"""
GET request to vulnerablecode api
by name of the package
"""


def get_package_data_by_name(pkg_type: str, url) -> Response:
    #url = BASE_URL + "packages/"
    params = {"type": pkg_type, "page_size": 500000}
    response = requests.get(url=url, headers=headers, params=params,)
    return response


"""
makes a GET request for each pkg name,
stores response in "<pkgname> + .json"
"""
def get_all_packages_by_names() -> None:
    try:
        f = open(FOLDER_PACKAGES + 'packages-names.json')
        pkg_names = json.load(f)

        for pkg_name in pkg_names:
            page_counter = 1
            pkg_type = pkg_name.replace("pkg:", "")
            url = BASE_URL + "packages/"
            response = get_package_data_by_name(pkg_type, url)

            if not os.path.exists("data/packages/" + pkg_type):
                os.mkdir("data/packages/" + pkg_type)

            file_path = FOLDER_PACKAGES + pkg_type + "/" + str(page_counter) + pkg_type + ".json"
            with open(file_path, "w") as outfile:
                json.dump(response.json(), outfile, indent=4)

            while response.json()["next"] is not None:
                page_counter += 1
                response = get_package_data_by_name(pkg_type, response.json()["next"])
                file_path = FOLDER_PACKAGES + pkg_type + "/" + str(page_counter) + pkg_type + ".json"
                with open(file_path, "w") as outfile:
                    json.dump(response.json(), outfile, indent=4)

            #time.sleep(10)


    except FileNotFoundError:
        print("File not existing")



get_all_packages_by_names()